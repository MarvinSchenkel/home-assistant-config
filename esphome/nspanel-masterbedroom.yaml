---
# Set some variables for convenience
substitutions:
  node_name: nspanel-masterbedroom
  device_name: NSPanel Master bedroom

# Note: this may not be needed if the pull request has been merged.
# Check https://github.com/esphome/esphome/pull/2956 for current status.
# external_components:
#   - source: github://pr#2956
#     components: [nextion]
#     refresh: 1h

esphome:
  name: $node_name
  comment: $device_name
  on_boot:
    priority: 601
    then:
      - lambda: id(disp1).send_command_printf("DRAKJHSUYDGBNCJHGJKSHBDN");

esp32:
  board: esp32dev

# esp32_ble_tracker:
#   scan_parameters:
#     # We currently use the defaults to ensure Bluetooth
#     # can co-exist with WiFi In the future we may be able to
#     # enable the built-in coexistence logic in ESP-IDF
#     active: true

# bluetooth_proxy:
#   active: true

ota:
  - platform: esphome
    password: !secret ota_pwd

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true

# Enable logging
logger:

# Enable Home Assistant API
api:
  services:
    # Service to play a song
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    # Service to uploade a new version of the TFT file
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'

# A reboot button is always useful
button:
  - platform: restart
    name: Restart $device_name

# Define some binary input
binary_sensor:
  # Left button of the NS Panel
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: relay_1

  # Right button of the NS Panel
  - platform: gpio
    name: $device_name Right Button
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: relay_2

  # Virtual button to turn on a light scene
  - platform: nextion
    name: $device_name lights_normal
    page_id: 1
    component_id: 6
    on_click:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.masterbedroom_lights_normal
      - homeassistant.service:
          service: input_boolean.turn_on
          data:
            entity_id: input_boolean.masterbedroom_manual_control

  # Virtual button to turn on a light scene
  - platform: nextion
    name: $device_name lights_evening
    page_id: 1
    component_id: 5
    on_click:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.masterbedroom_lights_evening
      - homeassistant.service:
          service: input_boolean.turn_on
          data:
            entity_id: input_boolean.masterbedroom_manual_control

  # Virtual button to turn on a light scene
  - platform: nextion
    name: $device_name lights_dimmed
    page_id: 1
    component_id: 7
    on_click:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.masterbedroom_lights_dim
      - homeassistant.service:
          service: input_boolean.turn_on
          data:
            entity_id: input_boolean.masterbedroom_manual_control

  # Virtual button to control the blinds
  - platform: nextion
    name: $device_name blinds_masterbedroom_open
    page_id: 2
    component_id: 5
    on_click:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.bedroom_cover_halfopen
      - homeassistant.service:
          service: input_boolean.turn_on
          data:
            entity_id: input_boolean.masterbedroom_cover_manual_control

  # Virtual button to control the blinds
  - platform: nextion
    name: $device_name blinds_masterbedroom_halfclosed
    page_id: 2
    component_id: 4
    on_click:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.bedroom_cover_halfclosed
      - homeassistant.service:
          service: input_boolean.turn_on
          data:
            entity_id: input_boolean.masterbedroom_cover_manual_control

  # Virtual button to control the blinds
  - platform: nextion
    name: $device_name blinds_masterbedroom_closed
    page_id: 2
    component_id: 6
    on_click:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.bedroom_cover_closed
      - homeassistant.service:
          service: input_boolean.turn_on
          data:
            entity_id: input_boolean.masterbedroom_cover_manual_control

  # Virtual button to control the blinds
  - platform: nextion
    name: $device_name blinds_masterbedroom_ventilating
    page_id: 2
    component_id: 7
    on_click:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.bedroom_cover_ventilating
      - homeassistant.service:
          service: input_boolean.turn_on
          data:
            entity_id: input_boolean.masterbedroom_cover_manual_control

  # Virtual button to control the blinds
  - platform: nextion
    name: $device_name blinds_masterbedroom_ventilatingnight
    page_id: 2
    component_id: 8
    on_click:
      - homeassistant.service:
          service: scene.turn_on
          data:
            entity_id: scene.bedroom_cover_ventilatingnight
      - homeassistant.service:
          service: input_boolean.turn_on
          data:
            entity_id: input_boolean.masterbedroom_cover_manual_control

sensor:
  # Read wifi status from NS Panel
  - platform: wifi_signal
    name: $device_name WiFi Signal
    update_interval: 60s

  # NS Panel's temperature sensor
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    name: $device_name Temperature

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  - platform: homeassistant
    id: current_brightness
    entity_id: sensor.nspanel_bedroom_brightness
    on_value:
      # Push it to the display
      then:
        - lambda: |-
            id(disp1).send_command_printf("home.brightness.val=%f", x);
            id(disp1).set_backlight_brightness(x/100);
            id(disp1).send_command_printf("home.sleep_timer.en=0");
            if(x>0){
              id(disp1).send_command_printf("page home");
            } else {
              id(disp1).send_command_printf("page screensaver");
            }

text_sensor:
  # Push value of custom sensor to the infobar. Display currently playing song
  # when music is playing or other info (like weather) when no music is playing
  - platform: homeassistant
    id: infobar
    entity_id: sensor.nspanel_livingroom_infobar
    on_value:
      then:
        - lambda: >-
            id(disp1).set_component_text_printf("home.infobar", "%s", x.c_str());
        - lambda: >-
            id(disp1).set_component_text_printf("lights.infobar","%s", x.c_str());
        - lambda: >-
            id(disp1).set_component_text_printf("blinds.infobar","%s", x.c_str());

# Define some outputs
switch:
  # The two relays
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22
  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

  # Pin 4 always needs to be on to power up the display
  - platform: gpio
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

# Configure the internal bleeper
output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

# Enable ringtone music support
rtttl:
  id: buzzer
  output: buzzer_out

# Configure UART for communicating with the screen
uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: http://192.168.1.80:8123/local/nspanel/NSPanel_masterbedroom.tft
    on_setup:
      then:
        - lambda: |-
            id(disp1).send_command_printf("home.brightness.val=%f",
                                          id(current_brightness).state);
            id(disp1).set_backlight_brightness(id(current_brightness).state/100);
