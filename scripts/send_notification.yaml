---
alias: send_notification
description: >
  Automatically send a notification to one or more
  devices, based on our presence and states of other devices.
mode: parallel
max: 100

fields:
  message:
    description: The message that needs to be sent to the receivers
  title:
    description: Title of the message
  receivers:
    description: List of people that need to receive the notification
  type:
    description: Type of the notification, default 'normal'
  image:
    description: (Optional) Image URL to show in the notification
  intercom_devices:
    description: >
      List of sonos devices to broadcast the message to
      (only used when one of the receivers is 'intercom')

variables:
  type: "{{ type | default('normal') }}"
  image: "{{ image | default('None') }}"
  home_status: ["Thuis", "Net Thuis"]
  away_status: ["Weg", "Net weg", "Lang weg"]
  laura_state: "{{ states('input_select.laura_status_dropdown') }}"
  marvin_state: "{{ states('input_select.marvin_status_dropdown') }}"

sequence:
  - repeat:
      count: "{{ receivers | length }}"
      sequence:
        - variables:
            receiver: "{{ receivers[repeat.index-1] }}"
            name: "{{ receiver[0] | upper }}{{ receiver[1:] }}"
            title: "{{ title | default('Hey') }} {{ name }}!"

        # First check if we need to play the notifcation on our TV
        - choose:
            - conditions:
                condition: or
                conditions:
                  - "{{ receiver == 'marvin'
                    and marvin_state in home_status
                    and not is_state('media_player.living_room_tv', 'off') }}"
                  - "{{ receiver == 'laura'
                    and laura_state in home_status
                    and not is_state('media_player.living_room_tv', 'off') }}"
              sequence:
                - service: notify.woonkamer
                  continue_on_error: true
                  data:
                    message: "{{ message }}"
                    title: "{{ title }}"
                    data:
                      duration: 7
                      position: top-right
                      image:
                        url: "{{ image }}"

        # Check if we need to notify the mancave TV
        - choose:
            - conditions:
                - condition: state
                  entity_id:
                    - media_player.mancave_tv
                  state: "on"
                - "{{ receiver == 'marvin' }}"
                - "{{ marvin_state in home_status }}"
              sequence:
                - service: notify.mancave_tv
                  continue_on_error: true
                  data:
                    message: "{{ message }}"
                    title: "{{ title }}"
                    data:
                      image: "{{ image }}"

        # Send mobile notifications
        - choose:
            - conditions: "{{ receiver == 'marvin'
                and (type == 'normal' or
                (type == 'away_only' and marvin_state in away_status) or
                (type == 'home_only' and marvin_state in home_status)
                ) }}"
              sequence:
                - service: notify.mobile_app_marvins_iphone_13_nieuw
                  data:
                    message: "{{ message }}"
                    title: "{{ title }}"
                    data:
                      image: "{{ image }}"
        - choose:
            - conditions: "{{ receiver == 'laura'
                and (type == 'normal' or
                (type == 'away_only' and laura_state in away_status) or
                (type == 'home_only' and laura_state in home_status)
                ) }}"
              sequence:
                - service: notify.mobile_app_iphone_van_l_a
                  data:
                    message: "{{ message }}"
                    title: "{{ title }}"
                    data:
                      image: "{{ image }}"
