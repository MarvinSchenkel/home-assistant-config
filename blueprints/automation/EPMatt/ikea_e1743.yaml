blueprint:
  name: Controller - IKEA E1743 On/Off Switch & Dimmer
  description: 'Controller automation for executing any kind of action triggered by
    an IKEA E1743 remote controller. Allows to optionally loop an action on a button
    long press.

    Supports Zigbee2MQTT, deCONZ, ZHA.


    Automations created with this blueprint can be connected with one or more [Hooks](https://epmatt.github.io/awesome-ha-blueprints/blueprints/hooks)
    supported by this controller.

    Hooks allow to easily create controller-based automations for interacting with
    media players, lights, covers and more.


    Full documentation for this controller and list of available Hooks [here](https://epmatt.github.io/awesome-ha-blueprints/blueprints/controllers/ikea_e1743).

    '
  source_url: https://github.com/EPMatt/awesome-ha-blueprints/blob/main/blueprints/controllers/ikea_e1743/ikea_e1743.yaml
  domain: automation
  input:
    integration:
      name: Integration
      description: Integration used for connecting the remote with Home Assistant.
        Select "Zigbee2MQTT", "deCONZ" or "ZHA"
      selector:
        select:
          options:
          - Zigbee2MQTT
          - deCONZ
          - ZHA
    remote:
      name: (ZHA, deCONZ) Remote
      description: The IKEA remote to use for the automation. Choose a value only
        if the remote is integrated with deCONZ or ZHA.
      default: ''
      selector:
        device: {}
    zigbee2mqtt_remote:
      name: (Zigbee2MQTT) Remote Action Sensor
      description: The action sensor of the IKEA remote to use for the automation.
        Choose a value only if the remote is integrated with Zigbee2MQTT.
      default: ''
      selector:
        entity:
          domain: sensor
    action_up_short:
      name: (Optional) Up button - short press
      description: Action to run on short up button press.
      default: []
      selector:
        action: {}
    action_up_double:
      name: (Optional) Up button - double press
      description: Action to run on double up button press.
      default: []
      selector:
        action: {}
    action_up_long:
      name: (Optional) Up button - long press
      description: Action to run on long up button press.
      default: []
      selector:
        action: {}
    action_up_release:
      name: (Optional) Up button - release after long press
      description: Action to run on up button release after a long press.
      default: []
      selector:
        action: {}
    action_down_short:
      name: (Optional) Down button - short press
      description: Action to run on short down button press.
      default: []
      selector:
        action: {}
    action_down_double:
      name: (Optional) Down button - double press
      description: Action to run on double down button press.
      default: []
      selector:
        action: {}
    action_down_long:
      name: (Optional) Down button - long press
      description: Action to run on long down button press.
      default: []
      selector:
        action: {}
    action_down_release:
      name: (Optional) Down button - release after long press
      description: Action to run on down button release after a long press.
      default: []
      selector:
        action: {}
    button_up_long_loop:
      name: Long up button press - loop until release
      description: Loop the action until the button is released.
      default: false
      selector:
        boolean: {}
    button_down_long_loop:
      name: Long down button press - loop until release
      description: Loop the action until the button is released.
      default: false
      selector:
        boolean: {}
    button_up_double_press:
      name: Expose up button double press event
      description: Choose whether or not to expose the virtual double press event
        for the up button. Turn this on if you are providing an action for the up
        button double press event.
      default: false
      selector:
        boolean: {}
    button_down_double_press:
      name: Expose down button double press event
      description: Choose whether or not to expose the virtual double press event
        for the down button. Turn this on if you are providing an action for the down
        button double press event.
      default: false
      selector:
        boolean: {}
    helper_last_loop_event_input:
      name: (ZHA, Zigbee2MQTT, double press action Required) Helper - Last Press Event
      description: Input Text used to store the last press event. See docs for more.
        Provide an entity only if the remote is integrated with ZHA, Zigbee2MQTT or
        if you're using a double press action.
      default: ''
      selector:
        entity:
          domain: input_text
    helper_double_press_delay:
      name: (Optional) Helper - Double Press delay
      description: Max delay between the first and the second button press for the
        double press event. Provide a value only if you're using a double press action.
        Increase this value if you notice that the double press action is not triggered
        properly.
      default: 1000
      selector:
        number:
          min: 0.0
          max: 10000.0
          unit_of_measurement: milliseconds
          mode: box
          step: 1.0
variables:
  integration: !input 'integration'
  button_up_long_loop: !input 'button_up_long_loop'
  button_down_long_loop: !input 'button_down_long_loop'
  helper_last_loop_event_input: !input 'helper_last_loop_event_input'
  action_down_release: !input 'action_down_release'
  action_up_release: !input 'action_up_release'
  action_up_double: !input 'action_up_double'
  action_down_double: !input 'action_down_double'
  button_up_double_press: !input 'button_up_double_press'
  button_down_double_press: !input 'button_down_double_press'
  integration_id: '{{ integration | lower }}'
  actions_mapping:
    zigbee2mqtt:
      button_up_short:
      - 'on'
      button_up_long:
      - brightness_move_up
      button_up_release:
      - brightness_stop
      button_down_short:
      - 'off'
      button_down_long:
      - brightness_move_down
      button_down_release:
      - brightness_stop
    deconz:
      button_up_short:
      - 1002
      button_up_long:
      - 1001
      button_up_release:
      - 1003
      button_down_short:
      - 2002
      button_down_long:
      - 2001
      button_down_release:
      - 2003
    zha:
      button_up_short:
      - 'on'
      button_up_long:
      - move_with_on_off_0_83
      button_up_release:
      - stop
      button_down_short:
      - 'off'
      button_down_long:
      - move_1_83
      button_down_release:
      - stop
  button_up_short: '{{ actions_mapping[integration_id]["button_up_short"] }}'
  button_up_long: '{{ actions_mapping[integration_id]["button_up_long"] }}'
  button_up_release: '{{ actions_mapping[integration_id]["button_up_release"] }}'
  button_down_short: '{{ actions_mapping[integration_id]["button_down_short"] }}'
  button_down_long: '{{ actions_mapping[integration_id]["button_down_long"] }}'
  button_down_release: '{{ actions_mapping[integration_id]["button_down_release"]
    }}'
  integrations_with_prev_event_storage:
  - zha
  - zigbee2mqtt
  zigbee2mqtt_remote: !input 'zigbee2mqtt_remote'
  remote: !input 'remote'
  controller_id: '{% if integration_id=="zigbee2mqtt" %}{{zigbee2mqtt_remote}}{% else
    %}{{remote}}{% endif %}'
mode: restart
max_exceeded: silent
trigger:
- platform: event
  event_type: state_changed
  event_data:
    entity_id: !input 'zigbee2mqtt_remote'
- platform: event
  event_type:
  - zha_event
  - deconz_event
  event_data:
    device_id: !input 'remote'
condition:
- condition: and
  conditions:
  - '{% set trigger_action %}{% if integration_id == "zigbee2mqtt" %}{{ trigger.event.data.new_state.state
    }}{% elif integration_id == "deconz" %}{{ trigger.event.data.event }}{% elif integration_id
    == "zha" %}{{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length
    > 0}}{{ trigger.event.data.args|join("_") }}{% endif %}{% endset %} {{ trigger_action
    != "" }}'
  - '{{ integration_id != "zigbee2mqtt" or trigger.event.data.new_state.state != trigger.event.data.old_state.state
    }}'
action:
- variables:
    trigger_action: '{% if integration_id == "zigbee2mqtt" %} {{ trigger.event.data.new_state.state
      }} {% elif integration_id == "deconz" %} {{ trigger.event.data.event }} {% elif
      integration_id == "zha" %} {{ trigger.event.data.command }}{{"_" if trigger.event.data.args|length
      > 0}}{{ trigger.event.data.args|join("_") }} {% endif %}'
- choose:
  - conditions: '{{ trigger_action in button_up_short }}'
    sequence:
    - choose:
      - conditions: '{{ button_up_double_press }}'
        sequence:
        - choose:
          - conditions: '{{ states(helper_last_loop_event_input) in button_up_short
              }}'
            sequence:
            - service: input_text.set_value
              data:
                entity_id: !input 'helper_last_loop_event_input'
                value: ''
            - event: ahb_controller_event
              event_data:
                controller: '{{controller_id}}'
                action: button_up_double
            - choose:
              default: !input 'action_up_double'
          default:
          - service: input_text.set_value
            data:
              entity_id: !input 'helper_last_loop_event_input'
              value: '{{ trigger_action }}'
          - delay:
              milliseconds: !input 'helper_double_press_delay'
          - service: input_text.set_value
            data:
              entity_id: !input 'helper_last_loop_event_input'
              value: ''
          - event: ahb_controller_event
            event_data:
              controller: '{{controller_id}}'
              action: button_up_short
          - choose:
            default: !input 'action_up_short'
      default:
      - event: ahb_controller_event
        event_data:
          controller: '{{controller_id}}'
          action: button_up_short
      - choose:
        default: !input 'action_up_short'
  - conditions: '{{ trigger_action in button_up_long }}'
    sequence:
    - choose:
      - conditions:
        - '{{ integration_id in integrations_with_prev_event_storage }}'
        sequence:
        - service: input_text.set_value
          data:
            entity_id: !input 'helper_last_loop_event_input'
            value: '{{ trigger_action }}'
    - event: ahb_controller_event
      event_data:
        controller: '{{controller_id}}'
        action: button_up_long
    - repeat:
        sequence: !input 'action_up_long'
        until: '{{ not button_up_long_loop }}'
  - conditions:
    - '{{ trigger_action in button_up_release }}'
    - '{{ not integration_id in integrations_with_prev_event_storage or states(helper_last_loop_event_input)
      in button_up_long }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{controller_id}}'
        action: button_up_release
    - choose:
      default: !input 'action_up_release'
  - conditions: '{{ trigger_action in button_down_short }}'
    sequence:
    - choose:
      - conditions: '{{ button_down_double_press }}'
        sequence:
        - choose:
          - conditions: '{{ states(helper_last_loop_event_input) in button_down_short
              }}'
            sequence:
            - service: input_text.set_value
              data:
                entity_id: !input 'helper_last_loop_event_input'
                value: ''
            - event: ahb_controller_event
              event_data:
                controller: '{{controller_id}}'
                action: button_down_double
            - choose:
              default: !input 'action_down_double'
          default:
          - service: input_text.set_value
            data:
              entity_id: !input 'helper_last_loop_event_input'
              value: '{{ trigger_action }}'
          - delay:
              milliseconds: !input 'helper_double_press_delay'
          - service: input_text.set_value
            data:
              entity_id: !input 'helper_last_loop_event_input'
              value: ''
          - event: ahb_controller_event
            event_data:
              controller: '{{controller_id}}'
              action: button_down_short
          - choose:
            default: !input 'action_down_short'
      default:
      - event: ahb_controller_event
        event_data:
          controller: '{{controller_id}}'
          action: button_down_short
      - choose:
        default: !input 'action_down_short'
  - conditions: '{{ trigger_action in button_down_long }}'
    sequence:
    - choose:
      - conditions:
        - '{{ integration_id in integrations_with_prev_event_storage }}'
        sequence:
        - service: input_text.set_value
          data:
            entity_id: !input 'helper_last_loop_event_input'
            value: '{{ trigger_action }}'
    - event: ahb_controller_event
      event_data:
        controller: '{{controller_id}}'
        action: button_down_long
    - repeat:
        sequence: !input 'action_down_long'
        until: '{{ not button_down_long_loop }}'
  - conditions:
    - '{{ trigger_action in button_down_release }}'
    - '{{ not integration_id in integrations_with_prev_event_storage or states(helper_last_loop_event_input)
      in button_down_long }}'
    sequence:
    - event: ahb_controller_event
      event_data:
        controller: '{{controller_id}}'
        action: button_down_release
    - choose:
      default: !input 'action_down_release'
